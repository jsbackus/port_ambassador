/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p firewalld1_interface.h: dbus_interfaces/org.fedoraproject.FirewallD1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FIREWALLD1_INTERFACE_H_1425611023
#define FIREWALLD1_INTERFACE_H_1425611023

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "firewalld_types.h"

/*
 * Proxy class for interface org.fedoraproject.FirewallD1
 */
class OrgFedoraprojectFirewallD1Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1"; }

public:
    OrgFedoraprojectFirewallD1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFedoraprojectFirewallD1Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> authorizeAll()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("authorizeAll"), argumentList);
    }

    inline QDBusPendingReply<> completeReload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("completeReload"), argumentList);
    }

    inline QDBusPendingReply<> disablePanicMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("disablePanicMode"), argumentList);
    }

    inline QDBusPendingReply<> enablePanicMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("enablePanicMode"), argumentList);
    }

    inline QDBusPendingReply<QString> getDefaultZone()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getDefaultZone"), argumentList);
    }

    inline QDBusPendingReply<IcmpTypeSettings> getIcmpTypeSettings(const QString &icmptype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(icmptype);
        return asyncCallWithArgumentList(QStringLiteral("getIcmpTypeSettings"), argumentList);
    }

    inline QDBusPendingReply<ServiceSettings> getServiceSettings(const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("getServiceSettings"), argumentList);
    }

    inline QDBusPendingReply<ZoneSettings> getZoneSettings(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getZoneSettings"), argumentList);
    }

    inline QDBusPendingReply<QStringList> listIcmpTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listIcmpTypes"), argumentList);
    }

    inline QDBusPendingReply<QStringList> listServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("listServices"), argumentList);
    }

    inline QDBusPendingReply<bool> queryPanicMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("queryPanicMode"), argumentList);
    }

    inline QDBusPendingReply<> reload()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reload"), argumentList);
    }

    inline QDBusPendingReply<> runtimeToPermanent()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("runtimeToPermanent"), argumentList);
    }

    inline QDBusPendingReply<> setDefaultZone(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("setDefaultZone"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DefaultZoneChanged(const QString &zone);
    void PanicModeDisabled();
    void PanicModeEnabled();
    void Reloaded();
};

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.direct
 */
class OrgFedoraprojectFirewallD1DirectInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.direct"; }

public:
    OrgFedoraprojectFirewallD1DirectInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFedoraprojectFirewallD1DirectInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addChain(const QString &ipv, const QString &table, const QString &chain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain);
        return asyncCallWithArgumentList(QStringLiteral("addChain"), argumentList);
    }

    inline QDBusPendingReply<> addPassthrough(const QString &ipv, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("addPassthrough"), argumentList);
    }

    inline QDBusPendingReply<> addRule(const QString &ipv, const QString &table, const QString &chain, int priority, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain) << QVariant::fromValue(priority) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("addRule"), argumentList);
    }
    /*
    inline QDBusPendingReply<ChainStruct> getAllChains()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getAllChains"), argumentList);
    }
    */
    /*
    inline QDBusPendingReply<PassthroughStruct> getAllPassthroughs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getAllPassthroughs"), argumentList);
    }
    */
    /*
    inline QDBusPendingReply<RulesStruct> getAllRules()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getAllRules"), argumentList);
    }
    */
    inline QDBusPendingReply<QStringList> getChains(const QString &ipv, const QString &table)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table);
        return asyncCallWithArgumentList(QStringLiteral("getChains"), argumentList);
    }
    /*
    inline QDBusPendingReply<QStringListList> getPassthroughs(const QString &ipv)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv);
        return asyncCallWithArgumentList(QStringLiteral("getPassthroughs"), argumentList);
    }
    */ /*
    inline QDBusPendingReply<ChainRulesStruct> getRules(const QString &ipv, const QString &table, const QString &chain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain);
        return asyncCallWithArgumentList(QStringLiteral("getRules"), argumentList);
    }
       */
    inline QDBusPendingReply<QString> passthrough(const QString &ipv, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("passthrough"), argumentList);
    }

    inline QDBusPendingReply<bool> queryChain(const QString &ipv, const QString &table, const QString &chain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain);
        return asyncCallWithArgumentList(QStringLiteral("queryChain"), argumentList);
    }

    inline QDBusPendingReply<bool> queryPassthrough(const QString &ipv, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("queryPassthrough"), argumentList);
    }

    inline QDBusPendingReply<bool> queryRule(const QString &ipv, const QString &table, const QString &chain, int priority, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain) << QVariant::fromValue(priority) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("queryRule"), argumentList);
    }

    inline QDBusPendingReply<> removeAllPassthroughs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("removeAllPassthroughs"), argumentList);
    }

    inline QDBusPendingReply<> removeChain(const QString &ipv, const QString &table, const QString &chain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain);
        return asyncCallWithArgumentList(QStringLiteral("removeChain"), argumentList);
    }

    inline QDBusPendingReply<> removePassthrough(const QString &ipv, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("removePassthrough"), argumentList);
    }

    inline QDBusPendingReply<> removeRule(const QString &ipv, const QString &table, const QString &chain, int priority, const QStringList &args)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain) << QVariant::fromValue(priority) << QVariant::fromValue(args);
        return asyncCallWithArgumentList(QStringLiteral("removeRule"), argumentList);
    }

    inline QDBusPendingReply<> removeRules(const QString &ipv, const QString &table, const QString &chain)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ipv) << QVariant::fromValue(table) << QVariant::fromValue(chain);
        return asyncCallWithArgumentList(QStringLiteral("removeRules"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ChainAdded(const QString &ipv, const QString &table, const QString &chain);
    void ChainRemoved(const QString &ipv, const QString &table, const QString &chain);
    void PassthroughAdded(const QString &ipv, const QStringList &args);
    void PassthroughRemoved(const QString &ipv, const QStringList &args);
    void RuleAdded(const QString &ipv, const QString &table, const QString &chain, int priority, const QStringList &args);
    void RuleRemoved(const QString &ipv, const QString &table, const QString &chain, int priority, const QStringList &args);
};

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.policies
 */
class OrgFedoraprojectFirewallD1PoliciesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.policies"; }

public:
    OrgFedoraprojectFirewallD1PoliciesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFedoraprojectFirewallD1PoliciesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<> addLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("addLockdownWhitelistUser"), argumentList);
    }

    inline QDBusPendingReply<> disableLockdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("disableLockdown"), argumentList);
    }

    inline QDBusPendingReply<> enableLockdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("enableLockdown"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getLockdownWhitelistCommands()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistCommands"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getLockdownWhitelistContexts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistContexts"), argumentList);
    }
    /*
    inline QDBusPendingReply<UIDList> getLockdownWhitelistUids()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistUids"), argumentList);
    }
    */
    inline QDBusPendingReply<QStringList> getLockdownWhitelistUsers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getLockdownWhitelistUsers"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("queryLockdown"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<bool> queryLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("queryLockdownWhitelistUser"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistCommand(const QString &command)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(command);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistCommand"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistContext(const QString &context)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(context);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistContext"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistUid(int uid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(uid);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistUid"), argumentList);
    }

    inline QDBusPendingReply<> removeLockdownWhitelistUser(const QString &user)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(user);
        return asyncCallWithArgumentList(QStringLiteral("removeLockdownWhitelistUser"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void LockdownDisabled();
    void LockdownEnabled();
    void LockdownWhitelistCommandAdded(const QString &command);
    void LockdownWhitelistCommandRemoved(const QString &command);
    void LockdownWhitelistContextAdded(const QString &context);
    void LockdownWhitelistContextRemoved(const QString &context);
    void LockdownWhitelistUidAdded(int uid);
    void LockdownWhitelistUidRemoved(int uid);
    void LockdownWhitelistUserAdded(const QString &user);
    void LockdownWhitelistUserRemoved(const QString &user);
};

/*
 * Proxy class for interface org.fedoraproject.FirewallD1.zone
 */
class OrgFedoraprojectFirewallD1ZoneInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fedoraproject.FirewallD1.zone"; }

public:
    OrgFedoraprojectFirewallD1ZoneInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFedoraprojectFirewallD1ZoneInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> addForwardPort(const QString &zone, const QString &port, const QString &protocol, const QString &toport, const QString &toaddr, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addForwardPort"), argumentList);
    }

    inline QDBusPendingReply<QString> addIcmpBlock(const QString &zone, const QString &icmp, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(icmp) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<QString> addInterface(const QString &zone, const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("addInterface"), argumentList);
    }

    inline QDBusPendingReply<QString> addMasquerade(const QString &zone, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addMasquerade"), argumentList);
    }

    inline QDBusPendingReply<QString> addPort(const QString &zone, const QString &port, const QString &protocol, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addPort"), argumentList);
    }

    inline QDBusPendingReply<QString> addRichRule(const QString &zone, const QString &rule, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(rule) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addRichRule"), argumentList);
    }

    inline QDBusPendingReply<QString> addService(const QString &zone, const QString &service, int timeout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(service) << QVariant::fromValue(timeout);
        return asyncCallWithArgumentList(QStringLiteral("addService"), argumentList);
    }

    inline QDBusPendingReply<QString> addSource(const QString &zone, const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("addSource"), argumentList);
    }

    inline QDBusPendingReply<QString> changeZone(const QString &zone, const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("changeZone"), argumentList);
    }

    inline QDBusPendingReply<QString> changeZoneOfInterface(const QString &zone, const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("changeZoneOfInterface"), argumentList);
    }

    inline QDBusPendingReply<QString> changeZoneOfSource(const QString &zone, const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("changeZoneOfSource"), argumentList);
    }
    /*
    inline QDBusPendingReply<ActiveZonesList> getActiveZones()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getActiveZones"), argumentList);
    }
    */
    /*
    inline QDBusPendingReply<ForwardStructList> getForwardPorts(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getForwardPorts"), argumentList);
    }
    */
    inline QDBusPendingReply<QStringList> getIcmpBlocks(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getIcmpBlocks"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getInterfaces(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getInterfaces"), argumentList);
    }

    //    inline QDBusPendingReply<PortProtoStructList> getPorts(const QString &zone)
    inline QDBusPendingReply< QList<QStringList> > getPorts(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getPorts"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getRichRules(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getRichRules"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getServices(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getServices"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getSources(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("getSources"), argumentList);
    }

    inline QDBusPendingReply<QString> getZoneOfInterface(const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("getZoneOfInterface"), argumentList);
    }

    inline QDBusPendingReply<QString> getZoneOfSource(const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("getZoneOfSource"), argumentList);
    }

    inline QDBusPendingReply<QStringList> getZones()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("getZones"), argumentList);
    }

    inline QDBusPendingReply<bool> isImmutable(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("isImmutable"), argumentList);
    }

    inline QDBusPendingReply<bool> queryForwardPort(const QString &zone, const QString &port, const QString &protocol, const QString &toport, const QString &toaddr)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr);
        return asyncCallWithArgumentList(QStringLiteral("queryForwardPort"), argumentList);
    }

    inline QDBusPendingReply<bool> queryIcmpBlock(const QString &zone, const QString &icmp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(icmp);
        return asyncCallWithArgumentList(QStringLiteral("queryIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<bool> queryInterface(const QString &zone, const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("queryInterface"), argumentList);
    }

    inline QDBusPendingReply<bool> queryMasquerade(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("queryMasquerade"), argumentList);
    }

    inline QDBusPendingReply<bool> queryPort(const QString &zone, const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("queryPort"), argumentList);
    }

    inline QDBusPendingReply<bool> queryRichRule(const QString &zone, const QString &rule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(rule);
        return asyncCallWithArgumentList(QStringLiteral("queryRichRule"), argumentList);
    }

    inline QDBusPendingReply<bool> queryService(const QString &zone, const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("queryService"), argumentList);
    }

    inline QDBusPendingReply<bool> querySource(const QString &zone, const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("querySource"), argumentList);
    }

    inline QDBusPendingReply<QString> removeForwardPort(const QString &zone, const QString &port, const QString &protocol, const QString &toport, const QString &toaddr)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol) << QVariant::fromValue(toport) << QVariant::fromValue(toaddr);
        return asyncCallWithArgumentList(QStringLiteral("removeForwardPort"), argumentList);
    }

    inline QDBusPendingReply<QString> removeIcmpBlock(const QString &zone, const QString &icmp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(icmp);
        return asyncCallWithArgumentList(QStringLiteral("removeIcmpBlock"), argumentList);
    }

    inline QDBusPendingReply<QString> removeInterface(const QString &zone, const QString &interface)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(interface);
        return asyncCallWithArgumentList(QStringLiteral("removeInterface"), argumentList);
    }

    inline QDBusPendingReply<QString> removeMasquerade(const QString &zone)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone);
        return asyncCallWithArgumentList(QStringLiteral("removeMasquerade"), argumentList);
    }

    inline QDBusPendingReply<QString> removePort(const QString &zone, const QString &port, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(port) << QVariant::fromValue(protocol);
        return asyncCallWithArgumentList(QStringLiteral("removePort"), argumentList);
    }

    inline QDBusPendingReply<QString> removeRichRule(const QString &zone, const QString &rule)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(rule);
        return asyncCallWithArgumentList(QStringLiteral("removeRichRule"), argumentList);
    }

    inline QDBusPendingReply<QString> removeService(const QString &zone, const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QStringLiteral("removeService"), argumentList);
    }

    inline QDBusPendingReply<QString> removeSource(const QString &zone, const QString &source)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(zone) << QVariant::fromValue(source);
        return asyncCallWithArgumentList(QStringLiteral("removeSource"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ForwardPortAdded(const QString &zone, const QString &port, const QString &protocol, const QString &toport, const QString &toaddr, int timeout);
    void ForwardPortRemoved(const QString &zone, const QString &port, const QString &protocol, const QString &toport, const QString &toaddr);
    void IcmpBlockAdded(const QString &zone, const QString &icmp, int timeout);
    void IcmpBlockRemoved(const QString &zone, const QString &icmp);
    void InterfaceAdded(const QString &zone, const QString &interface);
    void InterfaceRemoved(const QString &zone, const QString &interface);
    void MasqueradeAdded(const QString &zone, int timeout);
    void MasqueradeRemoved(const QString &zone);
    void PortAdded(const QString &zone, const QString &port, const QString &protocol, int timeout);
    void PortRemoved(const QString &zone, const QString &port, const QString &protocol);
    void RichRuleAdded(const QString &zone, const QString &rule, int timeout);
    void RichRuleRemoved(const QString &zone, const QString &rule);
    void ServiceAdded(const QString &zone, const QString &service, int timeout);
    void ServiceRemoved(const QString &zone, const QString &service);
    void SourceAdded(const QString &zone, const QString &source);
    void SourceRemoved(const QString &zone, const QString &source);
    void ZoneChanged(const QString &zone, const QString &interface);
    void ZoneOfInterfaceChanged(const QString &zone, const QString &interface);
    void ZoneOfSourceChanged(const QString &zone, const QString &source);
};

/*
 * Proxy class for interface org.freedesktop.DBus.Introspectable
 */
class OrgFreedesktopDBusIntrospectableInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Introspectable"; }

public:
    OrgFreedesktopDBusIntrospectableInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusIntrospectableInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Introspect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Introspect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OrgFreedesktopDBusPropertiesInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OrgFreedesktopDBusPropertiesInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopDBusPropertiesInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusVariant> Get(const QString &interface_name, const QString &property_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name);
        return asyncCallWithArgumentList(QStringLiteral("Get"), argumentList);
    }
    /*
    inline QDBusPendingReply<StringVariantDict> GetAll(const QString &interface_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name);
        return asyncCallWithArgumentList(QStringLiteral("GetAll"), argumentList);
    }
    */
    inline QDBusPendingReply<> Set(const QString &interface_name, const QString &property_name, const QDBusVariant &new_value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(interface_name) << QVariant::fromValue(property_name) << QVariant::fromValue(new_value);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    //    void PropertiesChanged(const QString &interface_name, StringVariantDict changed_properties, const QStringList &invalidated_properties);
};

namespace org {
  namespace fedoraproject {
    typedef ::OrgFedoraprojectFirewallD1Interface FirewallD1;
    namespace firewalld1 {
      typedef ::OrgFedoraprojectFirewallD1DirectInterface direct;
      typedef ::OrgFedoraprojectFirewallD1PoliciesInterface policies;
      typedef ::OrgFedoraprojectFirewallD1ZoneInterface zone;
    }
  }
  namespace freedesktop {
    namespace DBus {
      typedef ::OrgFreedesktopDBusIntrospectableInterface Introspectable;
      typedef ::OrgFreedesktopDBusPropertiesInterface Properties;
    }
  }
}
#endif
